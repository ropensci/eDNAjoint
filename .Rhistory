#'   behaving as expected.
#1. input tags are valid, q = FALSE, cov = FALSE
expect_error(joint_model(data = list(pcr.k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr.n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("Data should include 'pcr_n', 'pcr_k', and 'count'.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#2. input tags are valid, q = FALSE, cov = TRUE
site_cov <- cbind(c(1, 0), c(0.4, -0.4))
colnames(site_cov) <- c("var_a", "var_b")
expect_error(joint_model(data = list(pcr.k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr.n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site.cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste(paste0("Data should include 'pcr_n', 'pcr_k', ",
"'count', and 'site_cov'."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase2.html#prepare-the-data"),
sep = "\n"))
#3. input tags are valid, q = TRUE, cov = FALSE
expect_error(joint_model(data = list(pcr.k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr.n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count.type = rbind(c(1, 2, 1),
c(1, 2, NA))),
q = TRUE,
multicore = FALSE),
paste(paste0("Data should include 'pcr_n', 'pcr_k', ",
"'count', and 'count_type'."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#4. input tags are valid, q = TRUE, cov = TRUE
site_cov <- cbind(c(1, 0), c(0.4, -0.4))
colnames(site_cov) <- c("var_a", "var_b")
expect_error(joint_model(data = list(pcr.k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr.n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count.type = rbind(c(1, 2, 1),
c(1, 2, NA)),
site.cov = site_cov),
cov = c("var_a", "var_b"), q = TRUE,
multicore = FALSE),
paste(paste0("Data should include 'pcr_n', 'pcr_k', 'count', ",
"'count_type', and 'site_cov'."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#5. make sure dimensions of pcr_n and pcr_k are equal
#' @srrstats {BS2.1a} Test to ensure pre-processing routines to ensure all
#'   input data is dimensionally commensurate
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1, 1),
c(1, 1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("Dimensions of pcr_n and pcr_k do not match.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#6. make sure dimensions of count and count_type are equal, if count_type is
# present
#' @srrstats {BS2.1a} Test to ensure pre-processing routines to ensure all
#'   input data is dimensionally commensurate
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 2), c(1, 2))),
q = TRUE,
multicore = FALSE),
paste("Dimensions of count and count_type do not match.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#7. make sure number of rows in count = number of rows in pcr_n and pcr_k
#' @srrstats {BS2.1a} Test to ensure pre-processing routines to ensure all
#'   input data is dimensionally commensurate
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA),
c(4, 1, 1))),
multicore = FALSE),
paste(paste0("Number of sites \\(rows\\) in pcr data and ",
"traditional survey count data do not match."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#8. make sure all data is numeric -- if q == TRUE
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c("NA", 2, 2),
c(1, 2, 2))),
q = TRUE,
multicore = FALSE),
paste("Data should be numeric.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#9. make sure all data is numeric -- if q == FALSE
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, "NA")),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("Data should be numeric.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#10. make sure locations of NAs in count data match locations of NAs in
# count_type data
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(NA, 2, 2),
c(1, 2, 2))),
q = TRUE,
multicore = FALSE),
paste(paste0("Empty data cells \\(NA\\) in count data should ",
"match ",
"empty data cells \\(NA\\) in count_type data."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#11. make sure locations of NAs in pcr_n data match locations of NAs in
# pcr_k data
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, NA, 1)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste(paste0("Empty data cells \\(NA\\) in pcr_n data should ",
"match ",
"empty data cells \\(NA\\) in pcr_k data."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#12. make sure family is either "poisson", "negbin", or "gamma"
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
family = "normal",
multicore = FALSE),
paste0("Invalid family. Options include 'poisson', ",
"'negbin', and 'gamma'."))
#13. p10 priors is a vector of two numeric values
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
p10_priors = c(1, 1, 2),
multicore = FALSE),
paste0("p10_priors should be a vector of two positive numeric ",
"values. ex. c\\(1,20\\)"))
#14. p10 priors is a vector of two numeric values
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE,
p10_priors = "1,20"),
paste0("p10_priors should be a vector of two positive numeric ",
"values. ex. c\\(1,20\\)"))
#15. p10 priors is a vector of two numeric values
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
p10_priors = c(0, 20),
multicore = FALSE),
paste0("p10_priors should be a vector of two positive numeric ",
"values. ex. c\\(1,20\\)"))
#16. phi priors is a vector of two numeric values
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
phi_priors = c(0, 1), family = "negbin",
multicore = FALSE),
paste0("phi_priors should be a vector of two positive numeric ",
"values. ex. c\\(0.25,0.25\\)"))
#17. the smallest count_type is 1
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(0, 1, 2),
c(1, 2, NA))),
q = TRUE,
multicore = FALSE),
paste(paste0("The first gear type should be referenced as 1 in ",
"count_type. Subsequent gear types should be ",
"referenced 2, 3, 4, etc."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#18. count are integers
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4.1, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 1, 2),
c(1, 2, NA))),
q = TRUE, family  =  "negbin",
multicore = FALSE),
paste0("All values in count should be non-negative integers. ",
"Use family = 'gamma' if count is continuous."))
#19. pcr_n are integers
expect_error(joint_model(data = list(pcr_k = rbind(c(0.99, 1, 1),
c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 1, 2),
c(1, 2, NA))),
q = TRUE,
multicore = FALSE),
paste("All values in pcr_k should be non-negative integers.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#20. pcr_k are integers
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3.1, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 1, 2),
c(1, 2, NA))),
q = TRUE,
multicore = FALSE),
paste("All values in pcr_n should be non-negative integers.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#21. count_type are integers
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1.1, 1, 2),
c(1, 2, NA))),
q = TRUE,
multicore = FALSE),
paste("All values in count_type should be integers.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#22. site_cov is numeric, if present
site_cov <- cbind(c("high", "low"), c(0.4, -0.4))
colnames(site_cov) <- c("var_a", "var_b")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 2, 1),
c(1, 2, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"), q = TRUE,
multicore = FALSE),
paste("site_cov should be numeric.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#23. cov values match column names in site_cov
site_cov <- cbind(c(0, 1), c(0.4, -0.4))
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 2, 1),
c(1, 2, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"), q = TRUE,
multicore = FALSE),
paste(paste0("cov values should be listed in the column names ",
"of site_cov in the data."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#24. site_cov has same number of rows as pcr_n and count, if present
site_cov <- cbind(c(0, 1, 1), c(0.4, -0.4, 1))
colnames(site_cov) <- c("var_a", "var_b")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(1, 2, 1),
c(1, 2, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"), q = TRUE,
multicore = FALSE),
paste(paste0("The number of rows in site_cov matrix should ",
"match the number of rows in all other matrices."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#25. make sure count_type is not zero-length
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = matrix(NA, ncol = 3,
nrow = 0)),
q = TRUE,
multicore = FALSE),
paste("count_type contains zero-length data.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#26. make sure no column is entirely NA in count_type
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
count_type = rbind(c(4, 1, NA),
c(1, 1, NA))),
q = TRUE,
multicore = FALSE),
paste("count_type contains a column with all NA.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase3.html#prepare-the-data"),
sep = "\n"))
#27. make sure no column is entirely NA in pcr_k
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, NA), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("pcr_k contains a column with all NA.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#28. make sure no column is entirely NA in pcr_n
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, NA), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("pcr_n contains a column with all NA.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#29. make sure no column is entirely NA in count
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, NA), c(1, 1, NA))),
multicore = FALSE),
paste("count contains a column with all NA.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#30. make sure no data are undefined
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, Inf),
c(1, 1, NA))),
multicore = FALSE),
paste("count contains undefined values \\(i.e., Inf or -Inf\\)",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#31. make sure no data are undefined
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, Inf), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("pcr_n contains undefined values \\(i.e., Inf or -Inf\\)",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#32. make sure no data are undefined
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, Inf), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA))),
multicore = FALSE),
paste("pcr_k contains undefined values \\(i.e., Inf or -Inf\\)",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app",
"/usecase1.html#prepare-the-data"),
sep = "\n"))
#33. make sure site_cov is not zero-length
site_cov <- matrix(NA, ncol = 2, nrow = 0)
colnames(site_cov) <- c("var_a", "var_b")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste("site_cov contains zero-length data.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#34a. make sure there are no NA in site_cov
site_cov <- rbind(c(4, 1, 0), c(1, 1, NA))
colnames(site_cov) <- c("var_a", "var_b", "var_c")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste("site_cov should not contain missing values (i.e., NA).",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste("site_cov should not contain missing values ",
"\\(i.e., NA\\).",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste("site_cov should not contain missing values \\(i.e., NA\\).",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste(paste0("site_cov should not contain missing values ",
"\\(i.e., NA\\)."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#34b. make sure no column is entirely NA in site_cov
site_cov <- rbind(c(4, 1, NA), c(1, 1, NA))
colnames(site_cov) <- c("var_a", "var_b", "var_c")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste("site_cov contains a column with all NA.",
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#35. make sure no data are undefined
site_cov <- rbind(c(4, 1, Inf), c(1, 1, NA))
#34. make sure there are no NA in site_cov
site_cov <- rbind(c(4, 1, 0), c(1, 1, NA))
colnames(site_cov) <- c("var_a", "var_b", "var_c")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste(paste0("site_cov should not contain missing values ",
"\\(i.e., NA\\)."),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#35. make sure no data are undefined
site_cov <- rbind(c(4, 1, Inf), c(1, 1, NA))
colnames(site_cov) <- c("var_a", "var_b", "var_c")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste(paste0("site_cov contains undefined values \\(i.e., ",
"Inf or -Inf\\)"),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
#35. make sure no data are undefined
site_cov <- rbind(c(4, 1, Inf), c(1, 1, 1))
colnames(site_cov) <- c("var_a", "var_b", "var_c")
expect_error(joint_model(data = list(pcr_k = rbind(c(1, 1, 1), c(1, 1, NA)),
pcr_n = rbind(c(3, 3, 3), c(3, 3, NA)),
count = rbind(c(4, 1, 1), c(1, 1, NA)),
site_cov = site_cov),
cov = c("var_a", "var_b"),
multicore = FALSE),
paste(paste0("site_cov contains undefined values \\(i.e., ",
"Inf or -Inf\\)"),
"See the eDNAjoint guide for data formatting help: ",
paste0("https://ednajoint.netlify.app", "/usecase2.html"),
sep = "\n"))
9e-2
-9e-2
dnbinom(1, mu = 0, size = 1)
4 + * 2
4 * 2
exp(log(4) + log(2))
log(1)
exp(0)
